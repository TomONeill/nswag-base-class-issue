//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class MyBaseClass implements IMyBaseClass {
    age!: number;
    name!: string;

    constructor(data?: IMyBaseClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.age = _data["Age"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): MyBaseClass {
        data = typeof data === 'object' ? data : {};
        let result = new MyBaseClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Age"] = this.age;
        data["Name"] = this.name;
        return data;
    }
}

export interface IMyBaseClass {
    age: number;
    name: string;
}

export class ExtClass extends MyBaseClass implements IExtClass {
    name!: string; // This member must have an 'override' modifier because it overrides a member in the base class 'MyBaseClass'.ts(4114)

    constructor(data?: IExtClass) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["Name"];
        }
    }

    static override fromJS(data: any): ExtClass {
        data = typeof data === 'object' ? data : {};
        let result = new ExtClass();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IExtClass extends IMyBaseClass {
    name: string;
}

